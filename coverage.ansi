#!/usr/bin/env python3

'''
Simple colour terminal coverage reporter

Uses coverage from working directory.

Pipes everything through less -FRXS explicitly. Use LESS for any extra options,
but less will ignore anything in conflict with -FRXS. Does not obey PAGER.
'''

from typing import IO, Iterator
from curses import setupterm, tigetstr, tparm, COLOR_RED, COLOR_GREEN
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from contextlib import contextmanager, redirect_stdout
import subprocess
import json
import math
import sys


def coverage_json() -> str:
    return subprocess.check_output(['coverage', 'json', '-o', '-', '--fail-under=0'],
                                   stdin=subprocess.DEVNULL,
                                   stderr=subprocess.PIPE,
                                   universal_newlines=True)


def setaf(i: int) -> bytes:
    return tparm(tigetstr('setaf'), i)


def setab(i: int) -> bytes:
    return tparm(tigetstr('setab'), i)


def bold() -> bytes:
    return tigetstr('bold')


def sgr0() -> bytes:
    return tigetstr('sgr0')


COLOUR_GRAY = 8


@contextmanager
def terminal_ctx() -> Iterator[None]:
    setupterm()
    try:
        yield
    finally:
        sys.stdout.buffer.write(sgr0())


LESS = ['less', '-FRXS']


@contextmanager
def less() -> Iterator[IO[str]]:
    # TODO: Preload / with pattern for missing lines.
    with subprocess.Popen(LESS,
                          stdin=subprocess.PIPE,
                          universal_newlines=True) as p:
        if p.returncode is not None:
            raise RuntimeError("Couldn't page output")
        yield p.stdin


if __name__ != '__main__':
    raise ImportError('Not a module')

argument_parser = ArgumentParser(
    __doc__,
    formatter_class=RawDescriptionHelpFormatter
)
args = argument_parser.parse_args()

with terminal_ctx(), less() as stdout, redirect_stdout(stdout):
    coverage = json.loads(coverage_json())
    t = coverage['totals']
    # If not using less, sys.stdout.buffer.write
    write = sys.stdout.buffer.write
    # TODO: Group, break, reorder.
    write(' '.join(map(str, [
        t['covered_lines'], 'covered lines,',
        t['num_statements'], 'statements,',
        t['percent_covered'], '% covered,',
        t['missing_lines'], 'missing lines,',
        t['excluded_lines'], 'excluded lines,',
        t['num_branches'], 'branches,',
        t['num_partial_branches'], 'partially covered branches,',
        t['covered_branches'], 'fully covered branches,',
        t['missing_branches'], 'missing branches'
    ])).encode())
    write(b'\n')

    for name, itscoverage in coverage['files'].items():
        write(bold() + name.encode() + b'\n' + sgr0())
        executed = set(itscoverage['executed_lines'])
        missing = set(itscoverage['missing_lines'])
        excluded = set(itscoverage['excluded_lines'])
        max_i = max(executed | missing | excluded)
        pad = math.ceil(math.log(max_i, 10)) + 1
        with open(name) as fp:
            for i, line in enumerate(fp, start=1):
                margin = str(i).ljust(pad).encode()
                if i in executed:
                    write(margin + setaf(COLOR_GREEN) + line.encode() + sgr0())
                elif i in missing:
                    write(margin + setaf(COLOR_RED) + line.encode() + sgr0())
                elif i in excluded:
                    write(margin + setaf(COLOUR_GRAY) + line.encode() + sgr0())
                # Non-executable line, or code is not up to date with coverage.
                # Cannot distinguish. Presume former. Latter is your problem.
                else:
                    # sgr0 in case code contains raw escape chars, like certain
                    # careless or not-knowing-better programmers do, or other
                    # weird edge case.
                    write(margin + line.encode() + sgr0())
